num_of_productions = 35
f_MaxClass = 4
f_MinClass = 2
f_MaxInterface = 5
f_MinInterface = 2
f_MaxMethodsInClass = 5
f_MinMethodsInClass = 1
f_MaxMethodsInInterface = 3
f_MinMethodsInInterface = 1
f_MaxDefaultMethodsInInterface = 3
f_MinDefaultMethodsInInterface = 1
f_MaxFields = 3
f_MinFields = 0
f_MaxStatements = 6
f_MinStatements = 2
f_MaxParameters = 3
f_MinParameters = 0

1 = class_declaration::=class_modifier" class "identifier"{"f_d" "m_d"}"
2 = modifier::="public"|"private"|"protected"|"final"|"abstract"
3 = identifier::=regex[a-zA-Z][a-zA-Z0-9_]+
4 = class_name::=identifier
5 = package_name ::= identifier
6 = interface_name::=identifier
7 = arglist::=expression|expression","expression
8 = field_declaration::=type" "identifier";"
9 = method_declaration::="void "identifier"("parameter_list")""{"statement"}"|"void "identifier"("")""{"statement"}"
10 = type::=type_specifier|type_specifier"[""]"
11 = type_specifier::="boolean"|"byte"|"char"|"short"|"int"|"float"|"long"|"double"
12 = parameter_list::=parameter|parameter","parameter
13 = parameter::=type" "identifier"1"|type" "identifier"2"
14 = expression::=identifier|numeric_expression
15 = assignment_expression::=identifier" = "expression
16 = number::=regex[1-9][0-9][0-9]
17 = numeric_expression::=number|expression" + "expression|expression" - "expression|expression" * "expression|expression" / "expression
18 = testing_expression::=identifier" > "identifier|identifier" < "identifier|identifier" == "identifier|identifier" != "identifier
19 = logical_expression::="true"|"false"
20 = string_expression::=expression"+"expression|expression"+="expression
21 = creating_expression::="new "classe_name"( )"|"new "classe_name" ("arglist")"|"new "type_specifier|"new "type_specifier"[ ]"|"new "type_specifier" ["expression"]"|"new "type_specifier "["expression"] [ ]"|"new ("expression")"
22 = statement::=assignment_expression";"|if_statement|while_statement
23 = if_statement::="if ""("logical_expression") ""{"statement1"}"|"if ""( "logical_expression" ) ""{"statement1"}"" else ""{"statement1"}"|"if ""("testing_expression") ""{"statement1"}"|"if ""( "testing_expression" ) ""{"statement1"}"" else ""{"statement1"}"
24 = while_statement::="while ""("testing_expression") ""{"statement1"}"
25 = interface_declaration::="interface "identifier"{"i_method_declaration"}"|"interface "identifier"{"default_method_declaration"}"|"interface "identifier"{"i_method_declaration" "default_method_declaration"}"
26 = default_method_declaration::="default "method_declaration
27 = i_method_declaration::="void "identifier"("parameter_list")"";"
28 = class_modifier::="public"
29 = class_declaration1::=class "identifier"{"f_d" "m_d"}"|"class "identifier" extends "class_name"{"f_d" "m_d"}"
30 = statement1::=assignment_expression";"
31 = Generic::="class "identifier"<T>{"gen_f_d" "gen_m_d"}"
32 = field_declaration1::="T "identifier";"
33 = method_declaration1::="void "identifier"("parameter_list1")""{"statement"}"|"void "identifier"("")""{"statement"}"
34 = parameter1::=T" "identifier"1"|T" "identifier"2"
35 = parameter_list1::=parameter1|parameter1","parameter1
